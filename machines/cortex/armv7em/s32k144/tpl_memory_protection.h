/**
 * @file tpl_memory_protection.c
 *
 * @section descr File description
 *
 * Trampoline processor dependant memory protection for STM32F4VG407 CORTEX-M4 mpu.
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 *  Trampoline is copyright (c) IRCCyN 2005-2009
 *  Autosar extension is copyright (c) IRCCyN and ESEO 2007-2009
 *  Trampoline and its Autosar extension are protected by the
 *  French intellectual property law.
 *
 *  This software is distributed under a dual licencing scheme
 *  1 - The Lesser GNU Public Licence v2 (LGPLv2)
 *  2 - The BSD Licence
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

#ifndef TPL_MEMORY_PROTECTION_H
#define TPL_MEMORY_PROTECTION_H

#include "tpl_os_internal_types.h"
#include "tpl_os_definitions.h"
#include "tpl_os_mem_prot.h"
#include "S32K144.h"

#define PERIPH_BASE	(0x40000000u)

extern CONSTP2CONST(tpl_mem_prot_desc, AUTOMATIC, OS_CONST) tpl_mp_table[TASK_COUNT+ISR_COUNT+1];

/**
 * This function prepares MMU data Ñ•tructures in memory
 * to reflect memory protection scheme generated by goil
 *
 * @note this does not starts the MMU
 */
extern FUNC(void, OS_CODE) tpl_init_mp();

/**
 * sets memory protection to privileged mode (no memory protection)
 */
extern FUNC(void, OS_CODE) tpl_kernel_mp (void);

/**
 * turn back to memory protection configuration according to the running
 * process. If it is (or becomes) trusted, MMU is kept disabled (it should
 * already have been disabled at kernel enter
 */
extern FUNC(void, OS_CODE) tpl_user_mp (void);

/**
 * Set the memory protection for a process
 */
extern FUNC(void, OS_CODE) tpl_set_process_mp (tpl_task_id this_process);


#endif /* TPL_MEMORY_PROTECTION_H */
